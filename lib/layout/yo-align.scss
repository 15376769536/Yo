@charset "utf-8";
@import "../core/variables";
@import "../core/classes";

// 合并variables和config中的同类map
@if global-variable-exists(align) {
    $align: map-merge($_align, $align);
} @else {
    $align: $_align;
}

// 定义常见水平垂直居中布局
@mixin _align {
    @include align;
    @include fullscreen;
}

/**
 * @module layout
 * @method yo-align
 * @version 1.8.0
 * @description 构造弹性布局内容对齐使用方法，可以是横向和纵向
 * @demo http://doyoe.github.io/Yo/demo/layout/yo-align.html
 * @param {String} $name 定义扩展名称 {add:1.8.0}
 * @param {String} $text-align 指定水平对齐方式 {add:1.8.0}
 * @param {String} $vertical-align 指定垂直对齐方式 {add:1.8.0}
 */

@mixin yo-align(
    $name: default,
    $text-align: default,
    $vertical-align: default) {
    // 区别是否新增实例还是修改本身
    @if $name == default {
        $name: "";
    } @else {
        $name: "-#{$name}";
    }
    // 如果值为default，则取config的定义
    @if $text-align == default {
        $text-align: map-get($align, text-align);
    }
    @if $vertical-align == default {
        $vertical-align: map-get($align, vertical-align);
    }
    .yo-align#{$name} {
        // 如果$text-align不等于config预设，则重绘弹性盒水平对齐方式
        @if $text-align != map-get($align, text-align) {
            @include align-items($text-align);
        }
        // 如果$vertical-align不等于config预设，则重绘弹性盒垂直对齐方式
        @if $vertical-align != map-get($align, vertical-align) {
            @include justify-content(vertical-align);
        }
        // 增量扩展
        @content;
    }
}

// 调用本文件时载入弹性布局基础构造
.yo-align {
    @include _align;
}